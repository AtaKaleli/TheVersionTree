--Ata Kaleli 2385474
--I read and accept the submission rules and the extra rules. This is my own work that is done by myself only






--You can use following prototypes for your functions.

--Part One
charToInt::Char->Int
charToInt x = if x=='0' then 0
         else if x=='1' then 1
		 else if x=='2' then 2
		 else if x=='3' then 3
		 else if x=='4' then 4
		 else if x=='5' then 5
		 else if x=='6' then 6
		 else if x=='7' then 7
		 else if x=='8' then 8
		 else if x=='9' then 9
		 else -1
--------------------------------------------------------------------		 
		 






data TernaryTree = Empty | Node String TernaryTree TernaryTree TernaryTree | NodeExist | NotReachable | NodeNotFound  deriving (Show,Eq,Ord)

checkChar []=[]
checkChar (x:xs) = if charToInt x /= -1 then [charToInt x] ++ checkChar xs else (checkChar xs)






isEmpty t= if t==Empty then True else False
 

helperFind Empty x (z:zs)=NotReachable-- case of when we have EmptyTree but still have int list to find 
helperFind (Node y leftSide midSide rightSide) x [] = if x==y then (Node y leftSide midSide rightSide) else NotReachable
helperFind Empty x []= NodeNotFound
helperFind (Node y leftSide midSide rightSide) x (z:zs)= if z == 1 then (helperFind  leftSide x zs)
													else if z == 2 then (helperFind  midSide x zs)
													else if z == 3 then (helperFind  rightSide x zs)
													else NotReachable 
findNode  Empty x = NodeNotFound
findNode (Node y leftSide midSide rightSide) x = helperFind  (Node y leftSide midSide rightSide) x (checkChar x)

--------------------------------------------------------------------------------------------------------------------------------------------------------------
--part2: insert Node

helperInsert Empty x (z:zs)= NotReachable
helperInsert (Node y leftSide midSide rightSide) x [] = if x==y then NodeExist else NotReachable
helperInsert Empty x []= Node x Empty Empty Empty
helperInsert  (Node y leftSide midSide rightSide) x (z:zs)=
													if z==1 then (Node y (helperInsert  leftSide x zs ) midSide rightSide)
													else if z==2 then (Node y  leftSide (helperInsert  midSide x zs )  rightSide)
												    else if z==3 then (Node y  leftSide midSide (helperInsert  rightSide x zs ))
												    else NotReachable
													

insertNode (Node y leftSide midSide rightSide) x = helperInsert  (Node y leftSide midSide rightSide) x (checkChar x)



-----------------------------------------------------------------------------------------------------------------------------------------
--part4:height of tree--
heightHelperLeft Empty = 0
heightHelperLeft (Node y leftSide midSide rightSide) = if not(isEmpty leftSide) then 1+ (heightHelperLeft leftSide) 
										else if not(isEmpty midSide) then 1+ (heightHelperLeft midSide)
										else if not(isEmpty rightSide) then 1+ (heightHelperLeft rightSide)
										else 0
heightHelperMid Empty = 0
heightHelperMid (Node y leftSide midSide rightSide) = if not(isEmpty midSide) then 1+ (heightHelperMid midSide) 
										else if not (isEmpty leftSide) then 1+ (heightHelperMid leftSide)
										else if not(isEmpty rightSide) then 1+ (heightHelperMid rightSide)
										else 0
heightHelperRight Empty = 0
heightHelperRight (Node y leftSide midSide rightSide) = if not(isEmpty rightSide) then 1+ (heightHelperRight rightSide) 
										else if not(isEmpty midSide) then 1+ (heightHelperRight midSide)
										else if not(isEmpty leftSide) then 1+ (heightHelperRight leftSide)
										else 0									
height Empty=0
height (Node y leftSide midSide rightSide)= 1+ (max(heightHelperRight(Node y leftSide midSide rightSide)) (max (heightHelperLeft(Node y leftSide midSide rightSide)) (heightHelperMid(Node y leftSide midSide rightSide))))
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--part3: total Nodes

totalNodes Empty = 0
totalNodes(Node y leftSide midSide rightSide)= 1+ totalNodes leftSide + totalNodes midSide + totalNodes rightSide


--part5: node counts of each level

levelcount Empty x = 0



--input--
left=(Node "my1" Empty Empty (Node "my13" Empty Empty Empty))
mid= (Node "my2" Empty Empty Empty)
right= (Node "my3" Empty Empty Empty)
final = Node "my" left mid right




















